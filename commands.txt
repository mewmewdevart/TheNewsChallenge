sqlite3:
sqlite3 instance/newsletter_streaks.db
SELECT email, streak, timestamp FROM newsletter_read;

source venv/bin/activate
python:
python run.py
deactivate

---
Aqui estão os comandos `curl` para testar as principais rotas do seu backend. Eles cobrem o envio de dados via webhook, verificação de e-mail, obtenção do streak e histórico de aberturas.

---

### 1. **Enviar Dados via Webhook**
Simula o envio de dados de abertura de newsletter.

```bash
curl -X GET "http://localhost:5000/webhook?email=test@example.com&id=post_12345&utm_source=tiktok&utm_medium=socialpaid&utm_campaign=12/12/2024&utm_channel=web"
```

**Resposta esperada:**
```json
{
  "message": "Webhook recebido e salvo com sucesso",
  "email": "test@example.com",
  "id": "post_12345"
}
```

---

### 2. **Verificar se o E-mail Está Cadastrado**
Verifica se um e-mail está cadastrado no sistema.

```bash
curl -X GET "http://localhost:5000/check-email?email=test@example.com"
```

**Resposta esperada (e-mail cadastrado):**
```json
{
  "message": "E-mail encontrado",
  "email": "test@example.com"
}
```

**Resposta esperada (e-mail não cadastrado):**
```json
{
  "error": "E-mail não cadastrado"
}
```

---

### 3. **Obter o Streak de um E-mail**
Retorna o streak atual de um e-mail.

```bash
curl -X GET "http://localhost:5000/streak?email=test@example.com"
```

**Resposta esperada:**
```json
{
  "email": "test@example.com",
  "streak": 5
}
```

---

### 4. **Obter o Histórico de Aberturas**
Retorna o histórico de aberturas de um e-mail.

```bash
curl -X GET "http://localhost:5000/history?email=test@example.com"
```

**Resposta esperada:**
```json
[
  {
    "post_id": "post_12345",
    "timestamp": "2024-02-15T12:34:56"
  },
  {
    "post_id": "post_67890",
    "timestamp": "2024-02-14T11:22:33"
  }
]
```

---

### 5. **Testar Erros**
#### a. **E-mail Inválido**
```bash
curl -X GET "http://localhost:5000/check-email?email=invalid-email"
```

**Resposta esperada:**
```json
{
  "error": "Email é obrigatório"
}
```

#### b. **E-mail Não Cadastrado**
```bash
curl -X GET "http://localhost:5000/check-email?email=unknown@example.com"
```

**Resposta esperada:**
```json
{
  "error": "E-mail não cadastrado"
}
```

#### c. **Falta de Parâmetros Obrigatórios**
```bash
curl -X GET "http://localhost:5000/webhook"
```

**Resposta esperada:**
```json
{
  "error": "Email e ID são obrigatórios"
}
```

---

### 6. **Testar o Cálculo do Streak**
Para testar o cálculo do streak, envie várias requisições ao webhook com diferentes datas (simulando aberturas em dias consecutivos).

#### a. **Primeira Abertura**
```bash
curl -X GET "http://localhost:5000/webhook?email=test@example.com&id=post_11111"
```

#### b. **Segunda Abertura (Dia Seguinte)**
```bash
curl -X GET "http://localhost:5000/webhook?email=test@example.com&id=post_22222"
```

#### c. **Terceira Abertura (Domingo)**
```bash
curl -X GET "http://localhost:5000/webhook?email=test@example.com&id=post_33333"
```

#### d. **Verificar o Streak**
```bash
curl -X GET "http://localhost:5000/streak?email=test@example.com"
```

**Resposta esperada (se o domingo for ignorado):**
```json
{
  "email": "test@example.com",
  "streak": 2
}
```

---

### 7. **Testar o Histórico de Aberturas**
Após enviar várias requisições ao webhook, verifique o histórico:

```bash
curl -X GET "http://localhost:5000/history?email=test@example.com"
```

**Resposta esperada:**
```json
[
  {
    "post_id": "post_33333",
    "timestamp": "2024-02-18T12:34:56"
  },
  {
    "post_id": "post_22222",
    "timestamp": "2024-02-17T11:22:33"
  },
  {
    "post_id": "post_11111",
    "timestamp": "2024-02-16T10:11:12"
  }
]
```

---

### 8. **Testar Mensagens Motivacionais**
No frontend, após o login, a mensagem motivacional será exibida com base no streak. Para testar, use e-mails com diferentes streaks:

- **Streak 0:** "Comece agora e mantenha seu streak!"
- **Streak 3:** "Você está indo bem! Seu streak é de 3 dias. Continue assim!"
- **Streak 10:** "Incrível! Seu streak é de 10 dias. Você é um leitor dedicado!"
